(document in progress, not finished)

# How to run an aspnet core (net 5) api in LINUX with SSL

## Disclaimer
This document is like a "cheat sheet", this is not a tutotial.
To understand the document, you must have knowledge about net5 development and about basic LINUX config.

instalación debian 10

# estoy como root

apt-get update
apt-get dist-upgrade -y

shutdown now -r

apt-get update
apt autoremove

# https://docs.microsoft.com/es-es/dotnet/core/install/linux-debian
wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb
rm packages-microsoft-prod.deb
apt-get update
apt-get install -y apt-transport-https
apt-get update
sudo apt-get install -y aspnetcore-runtime-5.0

# si en lugar de instalar asp.net core queremos instalarlo completo:
# apt-get install -y dotnet-runtime-5.0

apt-get install nginx -y
apt-get install unzip -y

# tenemos que tener un zip subido a algún sitio para descargarlo que contenga la aplicación COMPLIADA 
# modo implementación: dependiente (esto quiere decir que tenemos q tener el .net runtime instalado en linux previamente)
# runtime destino: linux-x64
# quitar los ensamblados no usados
# eliminar antes de publicar
# -----

# Asegurarse que en el startup.cs, hemos añadido esto en ConfigureServices
# necesario para el SSL

            services.Configure<ForwardedHeadersOptions>(options =>
            {
                options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;
            });

# Asegurarse que en el startup.cs, hemos añadido esto en Configure como PRIMERA LINEA del método:

	app.UseForwardedHeaders();




# comprimimos la carpeta y la subimos a un sitio para descargarla con 

cd /var/www
wget https://www.xxxx.es/aplicacion.zip

unzip aplicacion.zip

# renombrar directorio a como se llame la aplicación
cd nombre_aplicacion

# permisos para el usuario www-data
# dentro de /var/www

chown -R www-data:www-data /var/www/nombre_aplicacion

dotnet nombre_aplicacion.dll (la DLL principal )
# si todo va bien veremos corriendo la aplicación con los mensajes info verde de .net

# poner la aplicación como servicio
nano /etc/systemd/system/nombre_aplicacion.service

[Unit]
Description=alpel.identity

[Service]
WorkingDirectory=/var/www/alpel.identity
ExecStart=/usr/bin/dotnet /var/www/alpel.identity/Store.Identity.Service.dll --urls 'https://ip_publica:puerto'
Restart=always
RestartSec=10
KillSignal=SIGINT
SyslogIdentifier=alpel.identity
User=www-data
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target

# salir

# habilitar servicio
systemctl enable nombre_aplicacion.service
systemctl start nombre_aplicacion.service

# comprobar si funciona
systemctl status nombre_aplicacion.service

---------------------------------------------------------------------------

mkdir /etc/nginx/certs
cd /etc/nginx/certs

# tenemos que tener un fichero .zip que nos habrá enviado la autoridad de certificación con el certificado SSL .crt
# lo descargamos y lo descomprimimos

# OJO para esto necesitamos tanto el fichero .crt como el fichero .key que se genera cuando se hace la petición, 
# por lo que si no hemos hecho la petición desde este servidor, hay que hacerla:













nano /etc/nginx/nginx.conf
# dentro de la parte http, añadimos como primera esta línea:
limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;

nano /etc/nginx/sites-available/subdominio.dominio.tld



# buscamos de microsoft: Host ASP.NET Core on Linux with Nginx 
# para obtener el fichero de ejemplo de configuración de nginx
# que será algo así:

server {
    listen        80;
    server_name   example.com *.example.com;
    location / {
        proxy_pass         http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }
}

lo copiamos a memoria y hacemos:

nano /etc/nginx/sites-enabled/nombre-aplicacion
# pegamos la configuración y la modificamos con el dominio en cuestión
# esto es sin SSL, el SSL viene luego

service nginx restart




